[{"/Users/williamchan/Documents/side_projects/auto-send/client/src/index.js":"1","/Users/williamchan/Documents/side_projects/auto-send/client/src/reportWebVitals.js":"2","/Users/williamchan/Documents/side_projects/auto-send/client/src/App.js":"3","/Users/williamchan/Documents/side_projects/auto-send/client/src/contexts/UserProfile.js":"4","/Users/williamchan/Documents/side_projects/auto-send/client/src/components/home/Home.js":"5","/Users/williamchan/Documents/side_projects/auto-send/client/src/components/email/Email.js":"6","/Users/williamchan/Documents/side_projects/auto-send/client/src/components/home/Materials.js":"7","/Users/williamchan/Documents/side_projects/auto-send/client/src/components/email/Materials.js":"8","/Users/williamchan/Documents/side_projects/auto-send/client/src/services/EmailService.js":"9","/Users/williamchan/Documents/side_projects/auto-send/client/src/http-common.js":"10"},{"size":499,"mtime":1624226646889,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1624130356871,"results":"13","hashOfConfig":"12"},{"size":713,"mtime":1624322394468,"results":"14","hashOfConfig":"12"},{"size":113,"mtime":1624236370396,"results":"15","hashOfConfig":"12"},{"size":3025,"mtime":1624492293301,"results":"16","hashOfConfig":"12"},{"size":10662,"mtime":1624492535943,"results":"17","hashOfConfig":"12"},{"size":1235,"mtime":1624489599848,"results":"18","hashOfConfig":"12"},{"size":2151,"mtime":1624490558696,"results":"19","hashOfConfig":"12"},{"size":357,"mtime":1624490741649,"results":"20","hashOfConfig":"12"},{"size":161,"mtime":1624319341476,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10mm1is",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/williamchan/Documents/side_projects/auto-send/client/src/index.js",[],"/Users/williamchan/Documents/side_projects/auto-send/client/src/reportWebVitals.js",[],"/Users/williamchan/Documents/side_projects/auto-send/client/src/App.js",[],"/Users/williamchan/Documents/side_projects/auto-send/client/src/contexts/UserProfile.js",[],"/Users/williamchan/Documents/side_projects/auto-send/client/src/components/home/Home.js",["45"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ErrorDialog, Title, LoginTextField, LoginButton } from \"./Materials\";\nimport {\n  CircularProgress,\n  Typography,\n  Button,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from \"@material-ui/core\";\nimport UserProfile from \"../../contexts/UserProfile\";\nimport EmailService from \"../../services/EmailService\";\n\nconst Home = () => {\n  const history = useHistory();\n  const [profile, setProfile] = useContext(UserProfile);\n  const [loading, setLoading] = useState(true);\n  const [openError, setOpenError] = useState(false);\n  const usernameRef = React.createRef();\n  const passwordRef = React.createRef();\n\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 700);\n  },[])\n\n  function handleClick() {\n    let credentials = {\n      email: usernameRef.current.children[1].children[0].value,\n      password: passwordRef.current.children[1].children[0].value,\n    };\n    setProfile(credentials);\n\n    (async () => {\n      setLoading(true)\n      const authenticated = await EmailService.authenticateEmail(credentials);\n\n      if (authenticated.data) {\n        history.push(\"/email\");\n      } else {\n        setLoading(false)\n        openErrorDialog();\n        console.log(\"Incorrect credentials\");\n      }\n    })();\n  }\n\n  function openErrorDialog() {\n    setOpenError(!openError);\n  }\n\n  return (\n    <div class=\"h-full\">\n      <ErrorDialog open={openError}>\n        <DialogTitle>Error</DialogTitle>\n        <DialogContent>\n          <Typography gutterBottom>\n            Incorrect email or password, please try again\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={openErrorDialog.bind(this)}>\n            Close\n          </Button>\n        </DialogActions>\n      </ErrorDialog>\n      {loading === false ? (\n        <form\n          class=\"h-full flex flex-wrap content-center justify-center flex-col\"\n          noValidate\n          autoComplete=\"off\"\n        >\n          <div class=\"text-center\">\n            <Title variant=\"h2\">AutoSend</Title>\n          </div>\n          <div class=\"w-96 mt-5\">\n            <LoginTextField\n              ref={usernameRef}\n              label=\"Email\"\n              variant=\"outlined\"\n              fullWidth={true}\n            />\n          </div>\n          <div class=\"w-96 mt-3\">\n            <LoginTextField\n              ref={passwordRef}\n              type=\"password\"\n              label=\"Password\"\n              variant=\"outlined\"\n              fullWidth={true}\n            />\n          </div>\n\n          <div class=\"w-96 mt-3 text-right\">\n            <LoginButton onClick={handleClick.bind()} variant=\"contained\">\n              Login\n            </LoginButton>\n          </div>\n        </form>\n      ) : (\n        <div class=\"h-full flex flex-wrap content-center justify-center\">\n          <CircularProgress size={100} />\n        </div>\n        \n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/williamchan/Documents/side_projects/auto-send/client/src/components/email/Email.js",["46"],"import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  CircularProgress,\n  CardContent,\n  Divider,\n  Typography,\n  Button,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from \"@material-ui/core\";\nimport {\n  InputField,\n  CustomCard,\n  ActionButton,\n  Title,\n  Text,\n  EmailPreview,\n  HelpIcon,\n  HelpDialog,\n  ErrorDialog,\n} from \"./Materials\";\nimport EmailService from \"../../services/EmailService\";\nimport UserProfile from \"../../contexts/UserProfile\";\n\nconst Email = () => {\n  const [profile, setProfile] = useContext(UserProfile);\n  const [openError, setOpenError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  const subjectRef = React.createRef();\n  const ccRef = React.createRef();\n  const bccRef = React.createRef();\n  const recipientsRef = React.createRef();\n  const namesRef = React.createRef();\n  const positionsRef = React.createRef();\n  const messageRef = React.createRef();\n  const previewRef = React.createRef();\n  const [helpOpen, setHelpOpen] = useState(false);\n\n  const intro = ` To get started make sure you input an email subject, the list of recipients, and the message you want to send.`;\n\n  const fieldInfoTitle = \"Field Information\";\n  const fieldInfoDesc = `- Recipients represents the emails of the people you want to send to\n  - Recipients represents the emails of the people you want to send to\n  - Names represents the names of the people you want to send to\n  - Positions represents the positions that the people applied for`;\n\n  const howTitle = \"Filling out Fields:\";\n  const howDesc = ` - If you plan to bcc/cc more than one person, make sure to separate their emails by a comma \n  (Example: jane.doe@gmail.com, testing@gmail.com)\n\n  - Recipients, names, and position should also be separated by a comma if there are several people. Make sure you list them out in the same order\n  (Example:\n   Recipients: jane.doe@gmail.com, john@gmail.com\n   Names: Jane, John\n   Position: Cookie, Monster)`;\n\n  let emailContent = {};\n\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 700);\n  }, []);\n\n  function handleClick() {\n    emailContent[\"email\"] = profile.email;\n    emailContent[\"password\"] = profile.password;\n    emailContent[\"subject\"] = subjectRef.current.children[1].children[0].value;\n    emailContent[\"cc\"] = ccRef.current.children[1].children[0].value;\n    emailContent[\"bcc\"] = bccRef.current.children[1].children[0].value;\n    emailContent[\"recipients\"] =\n      recipientsRef.current.children[1].children[0].value;\n    emailContent[\"names\"] = namesRef.current.children[1].children[0].value;\n    emailContent[\"positions\"] =\n      positionsRef.current.children[1].children[0].value;\n    emailContent[\"message\"] = messageRef.current.children[1].children[0].value;\n\n    (async () => {\n      setLoading(true);\n      const error = await EmailService.sendEmail(JSON.stringify(emailContent));\n      if (!error.data) {\n        setLoading(false);\n        setErrorMessage(\n          \"One or more of your recipients' emails are invalid, please check them over before sending an email again\"\n        );\n        setOpenError(!openError);\n      }\n    })();\n  }\n\n  function handleChange() {\n    let name = namesRef.current.children[1].children[0].value.split(\",\")[0];\n    let position =\n      positionsRef.current.children[1].children[0].value.split(\",\")[0];\n    let message = messageRef.current.children[1].children[0].value\n      .replace(\"{name}\", name)\n      .replace(\"{position}\", position);\n    previewRef.current.innerText = message;\n  }\n\n  function errorHandling() {\n    let subject = subjectRef.current.children[1].children[0].value;\n    let recipients = recipientsRef.current.children[1].children[0].value;\n    let message = messageRef.current.children[1].children[0].value;\n\n    if (subject === \"\" || recipients === \"\" || message === \"\") {\n      setErrorMessage(\n        \"One of the required fields have not been filled out, please complete them in order to send an email\"\n      );\n      setOpenError(!openError);\n    } else {\n      handleClick();\n    }\n  }\n\n  function openHelpDialog() {\n    setHelpOpen(!helpOpen);\n  }\n\n  function closeErrorDialog() {\n    setOpenError(!openError);\n  }\n\n  return (\n    <div class=\"h-full\">\n      <div class=\"px-2\">\n        <ErrorDialog open={openError}>\n          <DialogTitle>Error</DialogTitle>\n          <DialogContent>\n            <Typography gutterBottom>{errorMessage}</Typography>\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"primary\" onClick={closeErrorDialog.bind(this)}>\n              Close\n            </Button>\n          </DialogActions>\n        </ErrorDialog>\n\n        <HelpDialog open={helpOpen}>\n          <DialogTitle>Guide</DialogTitle>\n          <Divider style={{ background: \"#7E7E7E\" }} />\n          <DialogContent style={{ whiteSpace: \"pre-line\" }} dividers>\n            <Typography variant=\"body1\" gutterBottom paragraph>\n              {intro}\n            </Typography>\n\n            <Typography variant=\"subtitle1\" gutterBottom>\n              {fieldInfoTitle}\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom paragraph>\n              {fieldInfoDesc}\n            </Typography>\n\n            <Typography variant=\"subtitle1\" gutterBottom>\n              {howTitle}\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom paragraph>\n              {howDesc}\n            </Typography>\n          </DialogContent>\n          <Divider style={{ background: \"#7E7E7E\" }} />\n          <DialogActions dividers>\n            <Button color=\"primary\" onClick={openHelpDialog.bind(this)}>\n              Close\n            </Button>\n          </DialogActions>\n        </HelpDialog>\n      </div>\n      {loading === false ? (\n        <div class=\"flex content-center p-5 grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2\">\n          <div class=\"flex-none h-full px-2 py-2\">\n            <CustomCard>\n              <CardContent>\n                <div class=\"px-2\">\n                  <Title display=\"inline\" variant=\"h6\">\n                    Email Information\n                  </Title>\n                  <HelpIcon onClick={openHelpDialog.bind(this)} />\n                </div>\n                <div class=\"grid grid-cols-1\">\n                  <form noValidate autoComplete=\"off\">\n                    <div class=\"mt-6 px-2\">\n                      <InputField\n                        required\n                        ref={subjectRef}\n                        label=\"Subject\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      ></InputField>\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2\">\n                  <form noValidate autoComplete=\"off\">\n                    <div class=\"mt-6 px-2\">\n                      <InputField\n                        ref={bccRef}\n                        label=\"BCC\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      ></InputField>\n                    </div>\n                  </form>\n                  <form noValidate autoComplete=\"off\">\n                    <div class=\"mt-6 px-2\">\n                      <InputField\n                        ref={ccRef}\n                        label=\"CC\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      ></InputField>\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"grid grid-cols-1\">\n                  <form noValidate autoComplete=\"off\">\n                    <div class=\"mt-6 px-2\">\n                      <InputField\n                        required\n                        ref={recipientsRef}\n                        label=\"Recipients\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      ></InputField>\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"grid grid-cols-1\">\n                  <form noValidate autoComplete=\"off\">\n                    <div class=\"mt-6 px-2\">\n                      <InputField\n                        ref={namesRef}\n                        label=\"Names\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      ></InputField>\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"grid grid-cols-1\">\n                  <form noValidate autoComplete=\"off\">\n                    <div class=\"mt-6 px-2\">\n                      <InputField\n                        ref={positionsRef}\n                        label=\"Positions\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                      ></InputField>\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"grid grid-cols-1\">\n                  <form noValidate autoComplete=\"off\">\n                    <div class=\"mt-5 px-2\">\n                      <InputField\n                        required\n                        ref={messageRef}\n                        onChange={handleChange.bind(this)}\n                        label=\"Message\"\n                        variant=\"outlined\"\n                        fullWidth={true}\n                        multiline\n                        rows={10}\n                      ></InputField>\n                    </div>\n                  </form>\n                </div>\n\n                <div class=\"grid grid-cols-1 px-2 mt-6\">\n                  <ActionButton onClick={errorHandling.bind(this)}>\n                    Send Messages\n                  </ActionButton>\n                </div>\n              </CardContent>\n            </CustomCard>\n          </div>\n\n          <div class=\"flex-none h-full px-2 sm:grid-cols-1 py-2\">\n            <CustomCard>\n              <EmailPreview style={{ whiteSpace: \"pre-line\" }}>\n                <div class=\"px-2\">\n                  <Title variant=\"h6\">Email Preview</Title>\n                </div>\n                <div class=\"h-full flex flex-wrap content-center justify-center py-5\">\n                  <Text ref={previewRef}>Type a message to see me update</Text>\n                </div>\n              </EmailPreview>\n            </CustomCard>\n          </div>\n        </div>\n      ) : (\n        <div class=\"h-full flex flex-wrap content-center justify-center\">\n          <CircularProgress size={100} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Email;\n","/Users/williamchan/Documents/side_projects/auto-send/client/src/components/home/Materials.js",[],"/Users/williamchan/Documents/side_projects/auto-send/client/src/components/email/Materials.js",[],"/Users/williamchan/Documents/side_projects/auto-send/client/src/services/EmailService.js",["47","48"],"import { resolveContent } from \"nodemailer/lib/shared\";\nimport http from \"../http-common\";\n\nclass EmailService {\n\n    async sendEmail(emailContent){\n        return await http.post('/send', emailContent)\n    }\n\n    async authenticateEmail(credentials){\n        return await http.post('/authenticate', credentials)\n    }\n}\nexport default new EmailService;\n\n\n\n","/Users/williamchan/Documents/side_projects/auto-send/client/src/http-common.js",[],{"ruleId":"49","severity":1,"message":"50","line":17,"column":10,"nodeType":"51","messageId":"52","endLine":17,"endColumn":17},{"ruleId":"49","severity":1,"message":"53","line":27,"column":19,"nodeType":"51","messageId":"52","endLine":27,"endColumn":29},{"ruleId":"49","severity":1,"message":"54","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":24},{"ruleId":"55","severity":1,"message":"56","line":14,"column":16,"nodeType":"57","messageId":"58","endLine":14,"endColumn":32,"fix":"59"},"no-unused-vars","'profile' is assigned a value but never used.","Identifier","unusedVar","'setProfile' is assigned a value but never used.","'resolveContent' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"60","text":"61"},[352,352],"()"]