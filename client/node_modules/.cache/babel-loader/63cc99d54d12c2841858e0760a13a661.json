{"ast":null,"code":"'use strict';\n\nconst packageData = require('../../package.json');\n\nconst shared = require('../shared');\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\n\n\nclass StreamTransport {\n  constructor(options) {\n    options = options || {};\n    this.options = options || {};\n    this.name = 'StreamTransport';\n    this.version = packageData.version;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'stream-transport'\n    });\n    this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n  }\n  /**\n   * Compiles a mailcomposer message and forwards it to handler that sends it\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  send(mail, done) {\n    // We probably need this in the output\n    mail.message.keepBcc = true;\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let recipients = [].concat(envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info({\n      tnx: 'send',\n      messageId\n    }, 'Sending message %s to <%s> using %s line breaks', messageId, recipients.join(', '), this.winbreak ? '<CR><LF>' : '<LF>');\n    setImmediate(() => {\n      let stream;\n\n      try {\n        stream = mail.message.createReadStream();\n      } catch (E) {\n        this.logger.error({\n          err: E,\n          tnx: 'send',\n          messageId\n        }, 'Creating send stream failed for %s. %s', messageId, E.message);\n        return done(E);\n      }\n\n      if (!this.options.buffer) {\n        stream.once('error', err => {\n          this.logger.error({\n            err,\n            tnx: 'send',\n            messageId\n          }, 'Failed creating message for %s. %s', messageId, err.message);\n        });\n        return done(null, {\n          envelope: mail.data.envelope || mail.message.getEnvelope(),\n          messageId,\n          message: stream\n        });\n      }\n\n      let chunks = [];\n      let chunklen = 0;\n      stream.on('readable', () => {\n        let chunk;\n\n        while ((chunk = stream.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      stream.once('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'send',\n          messageId\n        }, 'Failed creating message for %s. %s', messageId, err.message);\n        return done(err);\n      });\n      stream.on('end', () => done(null, {\n        envelope: mail.data.envelope || mail.message.getEnvelope(),\n        messageId,\n        message: Buffer.concat(chunks, chunklen)\n      }));\n    });\n  }\n\n}\n\nmodule.exports = StreamTransport;","map":{"version":3,"sources":["/Users/williamchan/Documents/side_projects/auto-send/node_modules/nodemailer/lib/stream-transport/index.js"],"names":["packageData","require","shared","StreamTransport","constructor","options","name","version","logger","getLogger","component","winbreak","includes","newline","toString","toLowerCase","send","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","recipients","concat","to","length","push","splice","info","tnx","join","setImmediate","stream","createReadStream","E","error","err","buffer","once","chunks","chunklen","on","chunk","read","Buffer","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */\nclass StreamTransport {\n    constructor(options) {\n        options = options || {};\n\n        this.options = options || {};\n\n        this.name = 'StreamTransport';\n        this.version = packageData.version;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'stream-transport'\n        });\n\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n    }\n\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n        this.logger.info(\n            {\n                tnx: 'send',\n                messageId\n            },\n            'Sending message %s to <%s> using %s line breaks',\n            messageId,\n            recipients.join(', '),\n            this.winbreak ? '<CR><LF>' : '<LF>'\n        );\n\n        setImmediate(() => {\n            let stream;\n\n            try {\n                stream = mail.message.createReadStream();\n            } catch (E) {\n                this.logger.error(\n                    {\n                        err: E,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Creating send stream failed for %s. %s',\n                    messageId,\n                    E.message\n                );\n                return done(E);\n            }\n\n            if (!this.options.buffer) {\n                stream.once('error', err => {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'send',\n                            messageId\n                        },\n                        'Failed creating message for %s. %s',\n                        messageId,\n                        err.message\n                    );\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n\n            let chunks = [];\n            let chunklen = 0;\n            stream.on('readable', () => {\n                let chunk;\n                while ((chunk = stream.read()) !== null) {\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n\n            stream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'send',\n                        messageId\n                    },\n                    'Failed creating message for %s. %s',\n                    messageId,\n                    err.message\n                );\n                return done(err);\n            });\n\n            stream.on('end', () =>\n                done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                })\n            );\n        });\n    }\n}\n\nmodule.exports = StreamTransport;\n"]},"metadata":{},"sourceType":"script"}