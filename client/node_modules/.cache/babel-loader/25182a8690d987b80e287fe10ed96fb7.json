{"ast":null,"code":"'use strict';\n\nconst spawn = require('child_process').spawn;\n\nconst packageData = require('../../package.json');\n\nconst shared = require('../shared');\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\n\n\nclass SendmailTransport {\n  constructor(options) {\n    options = options || {}; // use a reference to spawn for mocking purposes\n\n    this._spawn = spawn;\n    this.options = options || {};\n    this.name = 'Sendmail';\n    this.version = packageData.version;\n    this.path = 'sendmail';\n    this.args = false;\n    this.winbreak = false;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'sendmail'\n    });\n\n    if (options) {\n      if (typeof options === 'string') {\n        this.path = options;\n      } else if (typeof options === 'object') {\n        if (options.path) {\n          this.path = options.path;\n        }\n\n        if (Array.isArray(options.args)) {\n          this.args = options.args;\n        }\n\n        this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n      }\n    }\n  }\n  /**\n   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n   *\n   * @param {Object} emailMessage MailComposer object\n   * @param {Function} callback Callback function to run when the sending is completed\n   */\n\n\n  send(mail, done) {\n    // Sendmail strips this header line by itself\n    mail.message.keepBcc = true;\n    let envelope = mail.data.envelope || mail.message.getEnvelope();\n    let messageId = mail.message.messageId();\n    let args;\n    let sendmail;\n    let returned;\n    const hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some(addr => /^-/.test(addr));\n\n    if (hasInvalidAddresses) {\n      return done(new Error('Can not send mail. Invalid envelope addresses.'));\n    }\n\n    if (this.args) {\n      // force -i to keep single dots\n      args = ['-i'].concat(this.args).concat(envelope.to);\n    } else {\n      args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n    }\n\n    let callback = err => {\n      if (returned) {\n        // ignore any additional responses, already done\n        return;\n      }\n\n      returned = true;\n\n      if (typeof done === 'function') {\n        if (err) {\n          return done(err);\n        } else {\n          return done(null, {\n            envelope: mail.data.envelope || mail.message.getEnvelope(),\n            messageId,\n            response: 'Messages queued for delivery'\n          });\n        }\n      }\n    };\n\n    try {\n      sendmail = this._spawn(this.path, args);\n    } catch (E) {\n      this.logger.error({\n        err: E,\n        tnx: 'spawn',\n        messageId\n      }, 'Error occurred while spawning sendmail. %s', E.message);\n      return callback(E);\n    }\n\n    if (sendmail) {\n      sendmail.on('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'spawn',\n          messageId\n        }, 'Error occurred when sending message %s. %s', messageId, err.message);\n        callback(err);\n      });\n      sendmail.once('exit', code => {\n        if (!code) {\n          return callback();\n        }\n\n        let err;\n\n        if (code === 127) {\n          err = new Error('Sendmail command not found, process exited with code ' + code);\n        } else {\n          err = new Error('Sendmail exited with code ' + code);\n        }\n\n        this.logger.error({\n          err,\n          tnx: 'stdin',\n          messageId\n        }, 'Error sending message %s to sendmail. %s', messageId, err.message);\n        callback(err);\n      });\n      sendmail.once('close', callback);\n      sendmail.stdin.on('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'stdin',\n          messageId\n        }, 'Error occurred when piping message %s to sendmail. %s', messageId, err.message);\n        callback(err);\n      });\n      let recipients = [].concat(envelope.to || []);\n\n      if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n      }\n\n      this.logger.info({\n        tnx: 'send',\n        messageId\n      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));\n      let sourceStream = mail.message.createReadStream();\n      sourceStream.once('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'stdin',\n          messageId\n        }, 'Error occurred when generating message %s. %s', messageId, err.message);\n        sendmail.kill('SIGINT'); // do not deliver the message\n\n        callback(err);\n      });\n      sourceStream.pipe(sendmail.stdin);\n    } else {\n      return callback(new Error('sendmail was not found'));\n    }\n  }\n\n}\n\nmodule.exports = SendmailTransport;","map":{"version":3,"sources":["/Users/williamchan/Documents/side_projects/auto-send/node_modules/nodemailer/lib/sendmail-transport/index.js"],"names":["spawn","require","packageData","shared","SendmailTransport","constructor","options","_spawn","name","version","path","args","winbreak","logger","getLogger","component","Array","isArray","includes","newline","toString","toLowerCase","send","mail","done","message","keepBcc","envelope","data","getEnvelope","messageId","sendmail","returned","hasInvalidAddresses","concat","from","to","some","addr","test","Error","callback","err","response","E","error","tnx","on","once","code","stdin","recipients","length","push","splice","info","join","sourceStream","createReadStream","kill","pipe","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAAvC;;AACA,MAAME,WAAW,GAAGD,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADiB,CAGjB;;AACA,SAAKC,MAAL,GAAcP,KAAd;AAEA,SAAKM,OAAL,GAAeA,OAAO,IAAI,EAA1B;AAEA,SAAKE,IAAL,GAAY,UAAZ;AACA,SAAKC,OAAL,GAAeP,WAAW,CAACO,OAA3B;AAEA,SAAKC,IAAL,GAAY,UAAZ;AACA,SAAKC,IAAL,GAAY,KAAZ;AACA,SAAKC,QAAL,GAAgB,KAAhB;AAEA,SAAKC,MAAL,GAAcV,MAAM,CAACW,SAAP,CAAiB,KAAKR,OAAtB,EAA+B;AACzCS,MAAAA,SAAS,EAAE,KAAKT,OAAL,CAAaS,SAAb,IAA0B;AADI,KAA/B,CAAd;;AAIA,QAAIT,OAAJ,EAAa;AACT,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,aAAKI,IAAL,GAAYJ,OAAZ;AACH,OAFD,MAEO,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AACpC,YAAIA,OAAO,CAACI,IAAZ,EAAkB;AACd,eAAKA,IAAL,GAAYJ,OAAO,CAACI,IAApB;AACH;;AACD,YAAIM,KAAK,CAACC,OAAN,CAAcX,OAAO,CAACK,IAAtB,CAAJ,EAAiC;AAC7B,eAAKA,IAAL,GAAYL,OAAO,CAACK,IAApB;AACH;;AACD,aAAKC,QAAL,GAAgB,CAAC,KAAD,EAAQ,SAAR,EAAmB,KAAnB,EAA0B,MAA1B,EAAkCM,QAAlC,CAA2C,CAACZ,OAAO,CAACa,OAAR,IAAmB,EAApB,EAAwBC,QAAxB,GAAmCC,WAAnC,EAA3C,CAAhB;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,IAAD,EAAOC,IAAP,EAAa;AACb;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAaC,OAAb,GAAuB,IAAvB;AAEA,QAAIC,QAAQ,GAAGJ,IAAI,CAACK,IAAL,CAAUD,QAAV,IAAsBJ,IAAI,CAACE,OAAL,CAAaI,WAAb,EAArC;AACA,QAAIC,SAAS,GAAGP,IAAI,CAACE,OAAL,CAAaK,SAAb,EAAhB;AACA,QAAInB,IAAJ;AACA,QAAIoB,QAAJ;AACA,QAAIC,QAAJ;AAEA,UAAMC,mBAAmB,GAAG,GACvBC,MADuB,CAChBP,QAAQ,CAACQ,IAAT,IAAiB,EADD,EAEvBD,MAFuB,CAEhBP,QAAQ,CAACS,EAAT,IAAe,EAFC,EAGvBC,IAHuB,CAGlBC,IAAI,IAAI,KAAKC,IAAL,CAAUD,IAAV,CAHU,CAA5B;;AAIA,QAAIL,mBAAJ,EAAyB;AACrB,aAAOT,IAAI,CAAC,IAAIgB,KAAJ,CAAU,gDAAV,CAAD,CAAX;AACH;;AAED,QAAI,KAAK7B,IAAT,EAAe;AACX;AACAA,MAAAA,IAAI,GAAG,CAAC,IAAD,EAAOuB,MAAP,CAAc,KAAKvB,IAAnB,EAAyBuB,MAAzB,CAAgCP,QAAQ,CAACS,EAAzC,CAAP;AACH,KAHD,MAGO;AACHzB,MAAAA,IAAI,GAAG,CAAC,IAAD,EAAOuB,MAAP,CAAcP,QAAQ,CAACQ,IAAT,GAAgB,CAAC,IAAD,EAAOR,QAAQ,CAACQ,IAAhB,CAAhB,GAAwC,EAAtD,EAA0DD,MAA1D,CAAiEP,QAAQ,CAACS,EAA1E,CAAP;AACH;;AAED,QAAIK,QAAQ,GAAGC,GAAG,IAAI;AAClB,UAAIV,QAAJ,EAAc;AACV;AACA;AACH;;AACDA,MAAAA,QAAQ,GAAG,IAAX;;AACA,UAAI,OAAOR,IAAP,KAAgB,UAApB,EAAgC;AAC5B,YAAIkB,GAAJ,EAAS;AACL,iBAAOlB,IAAI,CAACkB,GAAD,CAAX;AACH,SAFD,MAEO;AACH,iBAAOlB,IAAI,CAAC,IAAD,EAAO;AACdG,YAAAA,QAAQ,EAAEJ,IAAI,CAACK,IAAL,CAAUD,QAAV,IAAsBJ,IAAI,CAACE,OAAL,CAAaI,WAAb,EADlB;AAEdC,YAAAA,SAFc;AAGda,YAAAA,QAAQ,EAAE;AAHI,WAAP,CAAX;AAKH;AACJ;AACJ,KAjBD;;AAmBA,QAAI;AACAZ,MAAAA,QAAQ,GAAG,KAAKxB,MAAL,CAAY,KAAKG,IAAjB,EAAuBC,IAAvB,CAAX;AACH,KAFD,CAEE,OAAOiC,CAAP,EAAU;AACR,WAAK/B,MAAL,CAAYgC,KAAZ,CACI;AACIH,QAAAA,GAAG,EAAEE,CADT;AAEIE,QAAAA,GAAG,EAAE,OAFT;AAGIhB,QAAAA;AAHJ,OADJ,EAMI,4CANJ,EAOIc,CAAC,CAACnB,OAPN;AASA,aAAOgB,QAAQ,CAACG,CAAD,CAAf;AACH;;AAED,QAAIb,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACgB,EAAT,CAAY,OAAZ,EAAqBL,GAAG,IAAI;AACxB,aAAK7B,MAAL,CAAYgC,KAAZ,CACI;AACIH,UAAAA,GADJ;AAEII,UAAAA,GAAG,EAAE,OAFT;AAGIhB,UAAAA;AAHJ,SADJ,EAMI,4CANJ,EAOIA,SAPJ,EAQIY,GAAG,CAACjB,OARR;AAUAgB,QAAAA,QAAQ,CAACC,GAAD,CAAR;AACH,OAZD;AAcAX,MAAAA,QAAQ,CAACiB,IAAT,CAAc,MAAd,EAAsBC,IAAI,IAAI;AAC1B,YAAI,CAACA,IAAL,EAAW;AACP,iBAAOR,QAAQ,EAAf;AACH;;AACD,YAAIC,GAAJ;;AACA,YAAIO,IAAI,KAAK,GAAb,EAAkB;AACdP,UAAAA,GAAG,GAAG,IAAIF,KAAJ,CAAU,0DAA0DS,IAApE,CAAN;AACH,SAFD,MAEO;AACHP,UAAAA,GAAG,GAAG,IAAIF,KAAJ,CAAU,+BAA+BS,IAAzC,CAAN;AACH;;AAED,aAAKpC,MAAL,CAAYgC,KAAZ,CACI;AACIH,UAAAA,GADJ;AAEII,UAAAA,GAAG,EAAE,OAFT;AAGIhB,UAAAA;AAHJ,SADJ,EAMI,0CANJ,EAOIA,SAPJ,EAQIY,GAAG,CAACjB,OARR;AAUAgB,QAAAA,QAAQ,CAACC,GAAD,CAAR;AACH,OAtBD;AAuBAX,MAAAA,QAAQ,CAACiB,IAAT,CAAc,OAAd,EAAuBP,QAAvB;AAEAV,MAAAA,QAAQ,CAACmB,KAAT,CAAeH,EAAf,CAAkB,OAAlB,EAA2BL,GAAG,IAAI;AAC9B,aAAK7B,MAAL,CAAYgC,KAAZ,CACI;AACIH,UAAAA,GADJ;AAEII,UAAAA,GAAG,EAAE,OAFT;AAGIhB,UAAAA;AAHJ,SADJ,EAMI,uDANJ,EAOIA,SAPJ,EAQIY,GAAG,CAACjB,OARR;AAUAgB,QAAAA,QAAQ,CAACC,GAAD,CAAR;AACH,OAZD;AAcA,UAAIS,UAAU,GAAG,GAAGjB,MAAH,CAAUP,QAAQ,CAACS,EAAT,IAAe,EAAzB,CAAjB;;AACA,UAAIe,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AACvBD,QAAAA,UAAU,CAACE,IAAX,CAAgB,YAAYF,UAAU,CAACG,MAAX,CAAkB,CAAlB,EAAqBF,MAAjC,GAA0C,OAA1D;AACH;;AACD,WAAKvC,MAAL,CAAY0C,IAAZ,CACI;AACIT,QAAAA,GAAG,EAAE,MADT;AAEIhB,QAAAA;AAFJ,OADJ,EAKI,4BALJ,EAMIA,SANJ,EAOIqB,UAAU,CAACK,IAAX,CAAgB,IAAhB,CAPJ;AAUA,UAAIC,YAAY,GAAGlC,IAAI,CAACE,OAAL,CAAaiC,gBAAb,EAAnB;AACAD,MAAAA,YAAY,CAACT,IAAb,CAAkB,OAAlB,EAA2BN,GAAG,IAAI;AAC9B,aAAK7B,MAAL,CAAYgC,KAAZ,CACI;AACIH,UAAAA,GADJ;AAEII,UAAAA,GAAG,EAAE,OAFT;AAGIhB,UAAAA;AAHJ,SADJ,EAMI,+CANJ,EAOIA,SAPJ,EAQIY,GAAG,CAACjB,OARR;AAUAM,QAAAA,QAAQ,CAAC4B,IAAT,CAAc,QAAd,EAX8B,CAWL;;AACzBlB,QAAAA,QAAQ,CAACC,GAAD,CAAR;AACH,OAbD;AAeAe,MAAAA,YAAY,CAACG,IAAb,CAAkB7B,QAAQ,CAACmB,KAA3B;AACH,KArFD,MAqFO;AACH,aAAOT,QAAQ,CAAC,IAAID,KAAJ,CAAU,wBAAV,CAAD,CAAf;AACH;AACJ;;AA5LmB;;AA+LxBqB,MAAM,CAACC,OAAP,GAAiB1D,iBAAjB","sourcesContent":["'use strict';\n\nconst spawn = require('child_process').spawn;\nconst packageData = require('../../package.json');\nconst shared = require('../shared');\n\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */\nclass SendmailTransport {\n    constructor(options) {\n        options = options || {};\n\n        // use a reference to spawn for mocking purposes\n        this._spawn = spawn;\n\n        this.options = options || {};\n\n        this.name = 'Sendmail';\n        this.version = packageData.version;\n\n        this.path = 'sendmail';\n        this.args = false;\n        this.winbreak = false;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'sendmail'\n        });\n\n        if (options) {\n            if (typeof options === 'string') {\n                this.path = options;\n            } else if (typeof options === 'object') {\n                if (options.path) {\n                    this.path = options.path;\n                }\n                if (Array.isArray(options.args)) {\n                    this.args = options.args;\n                }\n                this.winbreak = ['win', 'windows', 'dos', '\\r\\n'].includes((options.newline || '').toString().toLowerCase());\n            }\n        }\n    }\n\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */\n    send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let args;\n        let sendmail;\n        let returned;\n\n        const hasInvalidAddresses = []\n            .concat(envelope.from || [])\n            .concat(envelope.to || [])\n            .some(addr => /^-/.test(addr));\n        if (hasInvalidAddresses) {\n            return done(new Error('Can not send mail. Invalid envelope addresses.'));\n        }\n\n        if (this.args) {\n            // force -i to keep single dots\n            args = ['-i'].concat(this.args).concat(envelope.to);\n        } else {\n            args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);\n        }\n\n        let callback = err => {\n            if (returned) {\n                // ignore any additional responses, already done\n                return;\n            }\n            returned = true;\n            if (typeof done === 'function') {\n                if (err) {\n                    return done(err);\n                } else {\n                    return done(null, {\n                        envelope: mail.data.envelope || mail.message.getEnvelope(),\n                        messageId,\n                        response: 'Messages queued for delivery'\n                    });\n                }\n            }\n        };\n\n        try {\n            sendmail = this._spawn(this.path, args);\n        } catch (E) {\n            this.logger.error(\n                {\n                    err: E,\n                    tnx: 'spawn',\n                    messageId\n                },\n                'Error occurred while spawning sendmail. %s',\n                E.message\n            );\n            return callback(E);\n        }\n\n        if (sendmail) {\n            sendmail.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'spawn',\n                        messageId\n                    },\n                    'Error occurred when sending message %s. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            sendmail.once('exit', code => {\n                if (!code) {\n                    return callback();\n                }\n                let err;\n                if (code === 127) {\n                    err = new Error('Sendmail command not found, process exited with code ' + code);\n                } else {\n                    err = new Error('Sendmail exited with code ' + code);\n                }\n\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error sending message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n            sendmail.once('close', callback);\n\n            sendmail.stdin.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when piping message %s to sendmail. %s',\n                    messageId,\n                    err.message\n                );\n                callback(err);\n            });\n\n            let recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push('...and ' + recipients.splice(2).length + ' more');\n            }\n            this.logger.info(\n                {\n                    tnx: 'send',\n                    messageId\n                },\n                'Sending message %s to <%s>',\n                messageId,\n                recipients.join(', ')\n            );\n\n            let sourceStream = mail.message.createReadStream();\n            sourceStream.once('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'stdin',\n                        messageId\n                    },\n                    'Error occurred when generating message %s. %s',\n                    messageId,\n                    err.message\n                );\n                sendmail.kill('SIGINT'); // do not deliver the message\n                callback(err);\n            });\n\n            sourceStream.pipe(sendmail.stdin);\n        } else {\n            return callback(new Error('sendmail was not found'));\n        }\n    }\n}\n\nmodule.exports = SendmailTransport;\n"]},"metadata":{},"sourceType":"script"}