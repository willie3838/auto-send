{"ast":null,"code":"var _jsxFileName = \"/Users/williamchan/Documents/side_projects/auto-send/client/src/components/information/Information.js\",\n    _s = $RefreshSig$();\n\nimport { Dialog, Divider, Button, DialogTitle, DialogContent, DialogActions, Typography } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport { CustomCard, Title, Text, HelpDialog } from \"./Materials\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Information = props => {\n  _s();\n\n  const intro = ` To get started make sure you input an email subject, the list of recipients, and the message you want to send.`;\n  const fieldInfoTitle = 'Field Information';\n  const fieldInfoDesc = `- Recipients represents the emails of the people you want to send to\n    - Recipients represents the emails of the people you want to send to\n    - Names represents the names of the people you want to send to\n    - Positions represents the positions that the people applied for`;\n  const howTitle = 'Filling out Fields:';\n  const howDesc = ` - If you plan to bcc/cc more than one person, make sure to separate their emails by a comma \n    (Example: jane.doe@gmail.com, testing@gmail.com)\n \n    - Recipients, names, and position should also be separated by a comma if there are several people. Make sure you list them out in the same order\n    (Example:\n     Recipients: jane.doe@gmail.com, john@gmail.com\n     Names: Jane, John\n     Position: Cookie, Monster)`;\n  const [open, setOpen] = useState(false);\n  useEffect(() => {\n    setOpen(props.open);\n  });\n\n  function onClose() {\n    setOpen(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"px-2\",\n    children: /*#__PURE__*/_jsxDEV(HelpDialog, {\n      open: open,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Guide\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        style: {\n          background: '#7E7E7E'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          whiteSpace: 'pre-line'\n        },\n        dividers: true,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          gutterBottom: true,\n          paragraph: true,\n          children: intro\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: fieldInfoTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          gutterBottom: true,\n          paragraph: true,\n          children: fieldInfoDesc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          gutterBottom: true,\n          children: howTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          gutterBottom: true,\n          paragraph: true,\n          children: howDesc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        style: {\n          background: '#7E7E7E'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClose.bind(this),\n          color: \"primary\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Information, \"e27cRtNMdAs0U0o1oHlS6A8OEBo=\");\n\n_c = Information;\nexport default Information;\n\nvar _c;\n\n$RefreshReg$(_c, \"Information\");","map":{"version":3,"sources":["/Users/williamchan/Documents/side_projects/auto-send/client/src/components/information/Information.js"],"names":["Dialog","Divider","Button","DialogTitle","DialogContent","DialogActions","Typography","React","useState","useEffect","CustomCard","Title","Text","HelpDialog","Information","props","intro","fieldInfoTitle","fieldInfoDesc","howTitle","howDesc","open","setOpen","onClose","background","whiteSpace","bind"],"mappings":"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","sourcesContent":["import { Dialog, Divider, Button, DialogTitle, DialogContent, DialogActions, Typography } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react'\nimport { CustomCard, Title, Text, HelpDialog } from \"./Materials\";\n\nconst Information = (props) => {\n    const intro = \n    ` To get started make sure you input an email subject, the list of recipients, and the message you want to send.`\n     \n    const fieldInfoTitle = 'Field Information'\n    const fieldInfoDesc = `- Recipients represents the emails of the people you want to send to\n    - Recipients represents the emails of the people you want to send to\n    - Names represents the names of the people you want to send to\n    - Positions represents the positions that the people applied for`\n\n    const howTitle = 'Filling out Fields:'\n    const howDesc = ` - If you plan to bcc/cc more than one person, make sure to separate their emails by a comma \n    (Example: jane.doe@gmail.com, testing@gmail.com)\n \n    - Recipients, names, and position should also be separated by a comma if there are several people. Make sure you list them out in the same order\n    (Example:\n     Recipients: jane.doe@gmail.com, john@gmail.com\n     Names: Jane, John\n     Position: Cookie, Monster)`\n    \n    const [open, setOpen] = useState(false);\n    \n    useEffect(() => {\n        setOpen(props.open)\n    });\n    function onClose(){\n        setOpen(false);\n    }\n\n    return (\n        <div class=\"px-2\">\n            <HelpDialog open={open}>\n                <DialogTitle>\n                    Guide\n                </DialogTitle>\n                <Divider style={{background: '#7E7E7E'}}/>\n                <DialogContent style={{whiteSpace: 'pre-line'}} dividers>\n                    <Typography variant=\"body1\" gutterBottom paragraph>{intro}</Typography>\n\n                    <Typography variant=\"subtitle1\" gutterBottom>{fieldInfoTitle}</Typography>\n                    <Typography variant=\"body1\" gutterBottom paragraph>{fieldInfoDesc}</Typography>\n\n                    <Typography variant=\"subtitle1\" gutterBottom>{howTitle}</Typography>\n                    <Typography variant=\"body1\" gutterBottom paragraph>{howDesc}</Typography>\n\n                </DialogContent>\n                <Divider style={{background: '#7E7E7E'}}/>\n                <DialogActions dividers>\n                    <Button onClick={onClose.bind(this)} color=\"primary\" >\n                        Close\n                    </Button>\n                </DialogActions>\n            </HelpDialog>\n        </div>\n    )\n}\n\nexport default Information\n"]},"metadata":{},"sourceType":"module"}