{"ast":null,"code":"/* eslint no-undefined: 0 */\n'use strict';\n\nconst MimeNode = require('../mime-node');\n\nconst mimeFuncs = require('../mime-funcs');\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\n\n\nclass MailComposer {\n  constructor(mail) {\n    this.mail = mail || {};\n    this.message = false;\n  }\n  /**\n   * Builds MimeNode instance\n   */\n\n\n  compile() {\n    this._alternatives = this.getAlternatives();\n    this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n    this._attachments = this.getAttachments(!!this._htmlNode);\n    this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n    this._useAlternative = this._alternatives.length > 1;\n    this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1; // Compose MIME tree\n\n    if (this.mail.raw) {\n      this.message = new MimeNode('message/rfc822', {\n        newline: this.mail.newline\n      }).setRaw(this.mail.raw);\n    } else if (this._useMixed) {\n      this.message = this._createMixed();\n    } else if (this._useAlternative) {\n      this.message = this._createAlternative();\n    } else if (this._useRelated) {\n      this.message = this._createRelated();\n    } else {\n      this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n        contentType: 'text/plain',\n        content: ''\n      });\n    } // Add custom headers\n\n\n    if (this.mail.headers) {\n      this.message.addHeader(this.mail.headers);\n    } // Add headers to the root node, always overrides custom headers\n\n\n    ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n      let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n\n      if (this.mail[key]) {\n        this.message.setHeader(header, this.mail[key]);\n      }\n    }); // Sets custom envelope\n\n    if (this.mail.envelope) {\n      this.message.setEnvelope(this.mail.envelope);\n    } // ensure Message-Id value\n\n\n    this.message.messageId();\n    return this.message;\n  }\n  /**\n   * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n   *\n   * @param {Boolean} findRelated If true separate related attachments from attached ones\n   * @returns {Object} An object of arrays (`related` and `attached`)\n   */\n\n\n  getAttachments(findRelated) {\n    let icalEvent, eventObject;\n    let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n      let data;\n      let isMessageNode = /^message\\//i.test(attachment.contentType);\n\n      if (/^data:/i.test(attachment.path || attachment.href)) {\n        attachment = this._processDataUrl(attachment);\n      }\n\n      data = {\n        contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n        contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n        contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n      };\n\n      if (attachment.filename) {\n        data.filename = attachment.filename;\n      } else if (!isMessageNode && attachment.filename !== false) {\n        data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n\n        if (data.filename.indexOf('.') < 0) {\n          data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n        }\n      }\n\n      if (/^https?:\\/\\//i.test(attachment.path)) {\n        attachment.href = attachment.path;\n        attachment.path = undefined;\n      }\n\n      if (attachment.cid) {\n        data.cid = attachment.cid;\n      }\n\n      if (attachment.raw) {\n        data.raw = attachment.raw;\n      } else if (attachment.path) {\n        data.content = {\n          path: attachment.path\n        };\n      } else if (attachment.href) {\n        data.content = {\n          href: attachment.href,\n          httpHeaders: attachment.httpHeaders\n        };\n      } else {\n        data.content = attachment.content || '';\n      }\n\n      if (attachment.encoding) {\n        data.encoding = attachment.encoding;\n      }\n\n      if (attachment.headers) {\n        data.headers = attachment.headers;\n      }\n\n      return data;\n    });\n\n    if (this.mail.icalEvent) {\n      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n        icalEvent = this.mail.icalEvent;\n      } else {\n        icalEvent = {\n          content: this.mail.icalEvent\n        };\n      }\n\n      eventObject = {};\n      Object.keys(icalEvent).forEach(key => {\n        eventObject[key] = icalEvent[key];\n      });\n      eventObject.contentType = 'application/ics';\n\n      if (!eventObject.headers) {\n        eventObject.headers = {};\n      }\n\n      eventObject.filename = eventObject.filename || 'invite.ics';\n      eventObject.headers['Content-Disposition'] = 'attachment';\n      eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n    }\n\n    if (!findRelated) {\n      return {\n        attached: attachments.concat(eventObject || []),\n        related: []\n      };\n    } else {\n      return {\n        attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n        related: attachments.filter(attachment => !!attachment.cid)\n      };\n    }\n  }\n  /**\n   * List alternatives. Resulting objects can be used as input for MimeNode nodes\n   *\n   * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n   */\n\n\n  getAlternatives() {\n    let alternatives = [],\n        text,\n        html,\n        watchHtml,\n        amp,\n        icalEvent,\n        eventObject;\n\n    if (this.mail.text) {\n      if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n        text = this.mail.text;\n      } else {\n        text = {\n          content: this.mail.text\n        };\n      }\n\n      text.contentType = 'text/plain; charset=utf-8';\n    }\n\n    if (this.mail.watchHtml) {\n      if (typeof this.mail.watchHtml === 'object' && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n        watchHtml = this.mail.watchHtml;\n      } else {\n        watchHtml = {\n          content: this.mail.watchHtml\n        };\n      }\n\n      watchHtml.contentType = 'text/watch-html; charset=utf-8';\n    }\n\n    if (this.mail.amp) {\n      if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n        amp = this.mail.amp;\n      } else {\n        amp = {\n          content: this.mail.amp\n        };\n      }\n\n      amp.contentType = 'text/x-amp-html; charset=utf-8';\n    } // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n\n\n    if (this.mail.icalEvent) {\n      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n        icalEvent = this.mail.icalEvent;\n      } else {\n        icalEvent = {\n          content: this.mail.icalEvent\n        };\n      }\n\n      eventObject = {};\n      Object.keys(icalEvent).forEach(key => {\n        eventObject[key] = icalEvent[key];\n      });\n\n      if (eventObject.content && typeof eventObject.content === 'object') {\n        // we are going to have the same attachment twice, so mark this to be\n        // resolved just once\n        eventObject.content._resolve = true;\n      }\n\n      eventObject.filename = false;\n      eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n\n      if (!eventObject.headers) {\n        eventObject.headers = {};\n      }\n    }\n\n    if (this.mail.html) {\n      if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n        html = this.mail.html;\n      } else {\n        html = {\n          content: this.mail.html\n        };\n      }\n\n      html.contentType = 'text/html; charset=utf-8';\n    }\n\n    [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach(alternative => {\n      let data;\n\n      if (/^data:/i.test(alternative.path || alternative.href)) {\n        alternative = this._processDataUrl(alternative);\n      }\n\n      data = {\n        contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n        contentTransferEncoding: alternative.contentTransferEncoding\n      };\n\n      if (alternative.filename) {\n        data.filename = alternative.filename;\n      }\n\n      if (/^https?:\\/\\//i.test(alternative.path)) {\n        alternative.href = alternative.path;\n        alternative.path = undefined;\n      }\n\n      if (alternative.raw) {\n        data.raw = alternative.raw;\n      } else if (alternative.path) {\n        data.content = {\n          path: alternative.path\n        };\n      } else if (alternative.href) {\n        data.content = {\n          href: alternative.href\n        };\n      } else {\n        data.content = alternative.content || '';\n      }\n\n      if (alternative.encoding) {\n        data.encoding = alternative.encoding;\n      }\n\n      if (alternative.headers) {\n        data.headers = alternative.headers;\n      }\n\n      alternatives.push(data);\n    });\n    return alternatives;\n  }\n  /**\n   * Builds multipart/mixed node. It should always contain different type of elements on the same level\n   * eg. text + attachments\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createMixed(parentNode) {\n    let node;\n\n    if (!parentNode) {\n      node = new MimeNode('multipart/mixed', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild('multipart/mixed', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    }\n\n    if (this._useAlternative) {\n      this._createAlternative(node);\n    } else if (this._useRelated) {\n      this._createRelated(node);\n    }\n\n    [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach(element => {\n      // if the element is a html node from related subpart then ignore it\n      if (!this._useRelated || element !== this._htmlNode) {\n        this._createContentNode(node, element);\n      }\n    });\n    return node;\n  }\n  /**\n   * Builds multipart/alternative node. It should always contain same type of elements on the same level\n   * eg. text + html view of the same data\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createAlternative(parentNode) {\n    let node;\n\n    if (!parentNode) {\n      node = new MimeNode('multipart/alternative', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild('multipart/alternative', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    }\n\n    this._alternatives.forEach(alternative => {\n      if (this._useRelated && this._htmlNode === alternative) {\n        this._createRelated(node);\n      } else {\n        this._createContentNode(node, alternative);\n      }\n    });\n\n    return node;\n  }\n  /**\n   * Builds multipart/related node. It should always contain html node with related attachments\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createRelated(parentNode) {\n    let node;\n\n    if (!parentNode) {\n      node = new MimeNode('multipart/related; type=\"text/html\"', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    }\n\n    this._createContentNode(node, this._htmlNode);\n\n    this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n\n    return node;\n  }\n  /**\n   * Creates a regular node with contents\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @param {Object} element Node data\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createContentNode(parentNode, element) {\n    element = element || {};\n    element.content = element.content || '';\n    let node;\n    let encoding = (element.encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n\n    if (!parentNode) {\n      node = new MimeNode(element.contentType, {\n        filename: element.filename,\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } else {\n      node = parentNode.createChild(element.contentType, {\n        filename: element.filename,\n        textEncoding: this.mail.textEncoding,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey,\n        newline: this.mail.newline\n      });\n    } // add custom headers\n\n\n    if (element.headers) {\n      node.addHeader(element.headers);\n    }\n\n    if (element.cid) {\n      node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n    }\n\n    if (element.contentTransferEncoding) {\n      node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n    } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n      node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n    }\n\n    if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n      node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n    }\n\n    if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n      element.content = Buffer.from(element.content, encoding);\n    } // prefer pregenerated raw content\n\n\n    if (element.raw) {\n      node.setRaw(element.raw);\n    } else {\n      node.setContent(element.content);\n    }\n\n    return node;\n  }\n  /**\n   * Parses data uri and converts it to a Buffer\n   *\n   * @param {Object} element Content element\n   * @return {Object} Parsed element\n   */\n\n\n  _processDataUrl(element) {\n    let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n\n    if (!parts) {\n      return element;\n    }\n\n    element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n\n    if ('path' in element) {\n      element.path = false;\n    }\n\n    if ('href' in element) {\n      element.href = false;\n    }\n\n    parts[1].split(';').forEach(item => {\n      if (/^\\w+\\/[^/]+$/i.test(item)) {\n        element.contentType = element.contentType || item.toLowerCase();\n      }\n    });\n    return element;\n  }\n\n}\n\nmodule.exports = MailComposer;","map":{"version":3,"sources":["/Users/williamchan/Documents/side_projects/auto-send/client/node_modules/nodemailer/lib/mail-composer/index.js"],"names":["MimeNode","require","mimeFuncs","MailComposer","constructor","mail","message","compile","_alternatives","getAlternatives","_htmlNode","filter","alternative","test","contentType","pop","_attachments","getAttachments","_useRelated","related","length","_useAlternative","_useMixed","attached","raw","newline","setRaw","_createMixed","_createAlternative","_createRelated","_createContentNode","concat","shift","content","headers","addHeader","forEach","header","key","replace","o","c","toUpperCase","setHeader","envelope","setEnvelope","messageId","findRelated","icalEvent","eventObject","attachments","map","attachment","i","data","isMessageNode","path","href","_processDataUrl","detectMimeType","filename","contentDisposition","contentTransferEncoding","split","indexOf","detectExtension","undefined","cid","httpHeaders","encoding","Object","keys","alternatives","text","html","watchHtml","amp","_resolve","method","toString","trim","push","parentNode","node","baseBoundary","textEncoding","boundaryPrefix","disableUrlAccess","disableFileAccess","normalizeHeaderKey","createChild","element","toLowerCase","includes","Buffer","from","setContent","parts","match","decodeURIComponent","item","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-undefined: 0 */\n\n'use strict';\n\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nclass MailComposer {\n    constructor(mail) {\n        this.mail = mail || {};\n        this.message = false;\n    }\n\n    /**\n     * Builds MimeNode instance\n     */\n    compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || (this._alternatives.length && this._attachments.attached.length === 1);\n\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode('message/rfc822', { newline: this.mail.newline }).setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(\n                false,\n                []\n                    .concat(this._alternatives || [])\n                    .concat(this._attachments.attached || [])\n                    .shift() || {\n                    contentType: 'text/plain',\n                    content: ''\n                }\n            );\n        }\n\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n\n        // Add headers to the root node, always overrides custom headers\n        ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n            let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n\n        // ensure Message-Id value\n        this.message.messageId();\n\n        return this.message;\n    }\n\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */\n    getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n\n            data = {\n                contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n                contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n                contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n            };\n\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n                if (data.filename.indexOf('.') < 0) {\n                    data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href,\n                    httpHeaders: attachment.httpHeaders\n                };\n            } else {\n                data.content = attachment.content || '';\n            }\n\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n\n            return data;\n        });\n\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            eventObject.contentType = 'application/ics';\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || 'invite.ics';\n            eventObject.headers['Content-Disposition'] = 'attachment';\n            eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n        }\n\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n                related: attachments.filter(attachment => !!attachment.cid)\n            };\n        }\n    }\n\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */\n    getAlternatives() {\n        let alternatives = [],\n            text,\n            html,\n            watchHtml,\n            amp,\n            icalEvent,\n            eventObject;\n\n        if (this.mail.text) {\n            if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = 'text/plain; charset=utf-8';\n        }\n\n        if (this.mail.watchHtml) {\n            if (\n                typeof this.mail.watchHtml === 'object' &&\n                (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)\n            ) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = 'text/watch-html; charset=utf-8';\n        }\n\n        if (this.mail.amp) {\n            if (typeof this.mail.amp === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n                amp = this.mail.amp;\n            } else {\n                amp = {\n                    content: this.mail.amp\n                };\n            }\n            amp.contentType = 'text/x-amp-html; charset=utf-8';\n        }\n\n        // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            if (eventObject.content && typeof eventObject.content === 'object') {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n\n            eventObject.filename = false;\n            eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n\n        if (this.mail.html) {\n            if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = 'text/html; charset=utf-8';\n        }\n\n        []\n            .concat(text || [])\n            .concat(watchHtml || [])\n            .concat(amp || [])\n            .concat(html || [])\n            .concat(eventObject || [])\n            .concat(this.mail.alternatives || [])\n            .forEach(alternative => {\n                let data;\n\n                if (/^data:/i.test(alternative.path || alternative.href)) {\n                    alternative = this._processDataUrl(alternative);\n                }\n\n                data = {\n                    contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n                    contentTransferEncoding: alternative.contentTransferEncoding\n                };\n\n                if (alternative.filename) {\n                    data.filename = alternative.filename;\n                }\n\n                if (/^https?:\\/\\//i.test(alternative.path)) {\n                    alternative.href = alternative.path;\n                    alternative.path = undefined;\n                }\n\n                if (alternative.raw) {\n                    data.raw = alternative.raw;\n                } else if (alternative.path) {\n                    data.content = {\n                        path: alternative.path\n                    };\n                } else if (alternative.href) {\n                    data.content = {\n                        href: alternative.href\n                    };\n                } else {\n                    data.content = alternative.content || '';\n                }\n\n                if (alternative.encoding) {\n                    data.encoding = alternative.encoding;\n                }\n\n                if (alternative.headers) {\n                    data.headers = alternative.headers;\n                }\n\n                alternatives.push(data);\n            });\n\n        return alternatives;\n    }\n\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createMixed(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/mixed', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/mixed', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n\n        []\n            .concat((!this._useAlternative && this._alternatives) || [])\n            .concat(this._attachments.attached || [])\n            .forEach(element => {\n                // if the element is a html node from related subpart then ignore it\n                if (!this._useRelated || element !== this._htmlNode) {\n                    this._createContentNode(node, element);\n                }\n            });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createAlternative(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/alternative', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/alternative', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._alternatives.forEach(alternative => {\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createRelated(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        this._createContentNode(node, this._htmlNode);\n\n        this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n\n        return node;\n    }\n\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */\n    _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || '';\n\n        let node;\n        let encoding = (element.encoding || 'utf8')\n            .toString()\n            .toLowerCase()\n            .replace(/[-_\\s]/g, '');\n\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                textEncoding: this.mail.textEncoding,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n\n        if (element.cid) {\n            node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n        }\n\n        if (element.contentTransferEncoding) {\n            node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n        }\n\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n        }\n\n        if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n\n        return node;\n    }\n\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */\n    _processDataUrl(element) {\n        let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n        if (!parts) {\n            return element;\n        }\n\n        element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n\n        if ('path' in element) {\n            element.path = false;\n        }\n\n        if ('href' in element) {\n            element.href = false;\n        }\n\n        parts[1].split(';').forEach(item => {\n            if (/^\\w+\\/[^/]+$/i.test(item)) {\n                element.contentType = element.contentType || item.toLowerCase();\n            }\n        });\n\n        return element;\n    }\n}\n\nmodule.exports = MailComposer;\n"]},"metadata":{},"sourceType":"script"}